<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.nineShadow.dao.PlayerBaseMapper" >
  <resultMap id="BaseResultMap" type="com.nineShadow.model.PlayerBase" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <id column="is_locked" property="isLocked" jdbcType="INTEGER" />
    <result column="realname" property="realname" jdbcType="VARCHAR" />
    <result column="IDcard" property="idcard" jdbcType="VARCHAR" />
    <result column="nickname" property="nickname" jdbcType="VARCHAR" />
    <result column="phone" property="phone" jdbcType="VARCHAR" />
    <result column="postcode" property="postcode" jdbcType="VARCHAR" />
    <result column="telname" property="telname" jdbcType="VARCHAR" />
    <result column="telphone" property="telphone" jdbcType="VARCHAR" />
    <result column="password" property="password" jdbcType="VARCHAR" />
    <result column="sex" property="sex" jdbcType="INTEGER" />
    <result column="headurl" property="headurl" jdbcType="VARCHAR" />
    <result column="address
" property="address" jdbcType="VARCHAR" />
    <result column="openid" property="openid" jdbcType="VARCHAR" />
    <result column="unionid" property="unionid" jdbcType="VARCHAR" />
    <result column="is_rnRegistration" property="isRnregistration" jdbcType="INTEGER" />
    <result column="is_bingding" property="isBingding" jdbcType="INTEGER" />
    <result column="register_time" property="registerTime" jdbcType="TIMESTAMP" />
    <result column="bindTime" property="bindtime" jdbcType="TIMESTAMP" />
    <result column="point" property="point" jdbcType="DECIMAL" />
    <result column="parentId" property="parentId" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, is_locked, realname, IDcard, nickname, phone, postcode, telname, telphone, password, 
    sex, headurl, address, openid, unionid, is_rnRegistration, is_bingding, register_time, 
    bindTime, point, parentId
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select
    <include refid="Base_Column_List" />
    from player_base
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from player_base
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.nineShadow.model.PlayerBase" useGeneratedKeys="true" keyProperty="id">
    insert into player_base (id, realname, IDcard,
    nickname, phone, postcode,
    telname, telphone, password,
    sex, headurl, address,
    openid, unionid, is_locked,
    is_rnRegistration, is_bingding, register_time,
    bindTime, point,parentId)
    values (#{id,jdbcType=INTEGER}, #{realname,jdbcType=VARCHAR}, #{idcard,jdbcType=VARCHAR},
    #{nickname,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR}, #{postcode,jdbcType=VARCHAR},
    #{telname,jdbcType=VARCHAR}, #{telphone,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
    #{sex,jdbcType=INTEGER}, #{headurl,jdbcType=VARCHAR}, #{address,jdbcType=VARCHAR},
    #{openid,jdbcType=VARCHAR}, #{unionid,jdbcType=VARCHAR}, #{isLocked,jdbcType=INTEGER},
    #{isRnregistration,jdbcType=INTEGER}, #{isBingding,jdbcType=INTEGER}, #{registerTime,jdbcType=TIMESTAMP},
    #{bindtime,jdbcType=TIMESTAMP}, #{point,jdbcType=DECIMAL},#{parentId,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.nineShadow.model.PlayerBase" useGeneratedKeys="true" keyProperty="id">
    insert into player_base
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="realname != null" >
        realname,
      </if>
      <if test="idcard != null" >
        IDcard,
      </if>
      <if test="nickname != null" >
        nickname,
      </if>
      <if test="phone != null" >
        phone,
      </if>
      <if test="postcode != null" >
        postcode,
      </if>
      <if test="telname != null" >
        telname,
      </if>
      <if test="telphone != null" >
        telphone,
      </if>
      <if test="password != null" >
        password,
      </if>
      <if test="sex != null" >
        sex,
      </if>
      <if test="headurl != null" >
        headurl,
      </if>
      <if test="address != null" >
        address,
      </if>
      <if test="openid != null" >
        openid,
      </if>
      <if test="unionid != null" >
        unionid,
      </if>
      <if test="isLocked != null" >
        is_locked,
      </if>
      <if test="isRnregistration != null" >
        is_rnRegistration,
      </if>
      <if test="isBingding != null" >
        is_bingding,
      </if>
      <if test="registerTime != null" >
        register_time,
      </if>
      <if test="bindtime != null" >
        bindTime,
      </if>
      <if test="point != null" >
        point,
      </if>
      <if test="parentId != null" >
        parentId,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="realname != null" >
        #{realname,jdbcType=VARCHAR},
      </if>
      <if test="idcard != null" >
        #{idcard,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        #{phone,jdbcType=VARCHAR},
      </if>
      <if test="postcode != null" >
        #{postcode,jdbcType=VARCHAR},
      </if>
      <if test="telname != null" >
        #{telname,jdbcType=VARCHAR},
      </if>
      <if test="telphone != null" >
        #{telphone,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        #{sex,jdbcType=INTEGER},
      </if>
      <if test="headurl != null" >
        #{headurl,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        #{address,jdbcType=VARCHAR},
      </if>
      <if test="openid != null" >
        #{openid,jdbcType=VARCHAR},
      </if>
      <if test="unionid != null" >
        #{unionid,jdbcType=VARCHAR},
      </if>
      <if test="isLocked != null" >
        #{isLocked,jdbcType=INTEGER},
      </if>
      <if test="isRnregistration != null" >
        #{isRnregistration,jdbcType=INTEGER},
      </if>
      <if test="isBingding != null" >
        #{isBingding,jdbcType=INTEGER},
      </if>
      <if test="registerTime != null" >
        #{registerTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bindtime != null" >
        #{bindtime,jdbcType=TIMESTAMP},
      </if>
      <if test="point != null" >
        #{point,jdbcType=DECIMAL},
      </if>
      <if test="parentId != null" >
      	#{parentId,jdbcType=VARCHAR}
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.nineShadow.model.PlayerBase" >
    update player_base
    <set >
      <if test="realname != null" >
        realname = #{realname,jdbcType=VARCHAR},
      </if>
      <if test="idcard != null" >
        IDcard = #{idcard,jdbcType=VARCHAR},
      </if>
      <if test="nickname != null" >
        nickname = #{nickname,jdbcType=VARCHAR},
      </if>
      <if test="phone != null" >
        phone = #{phone,jdbcType=VARCHAR},
      </if>
      <if test="postcode != null" >
        postcode = #{postcode,jdbcType=VARCHAR},
      </if>
      <if test="telname != null" >
        telname = #{telname,jdbcType=VARCHAR},
      </if>
      <if test="telphone != null" >
        telphone = #{telphone,jdbcType=VARCHAR},
      </if>
      <if test="password != null" >
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="sex != null" >
        sex = #{sex,jdbcType=INTEGER},
      </if>
      <if test="headurl != null" >
        headurl = #{headurl,jdbcType=VARCHAR},
      </if>
      <if test="address != null" >
        address = #{address,jdbcType=VARCHAR},
      </if>
      <if test="openid != null" >
        openid = #{openid,jdbcType=VARCHAR},
      </if>
      <if test="unionid != null" >
        unionid = #{unionid,jdbcType=VARCHAR},
      </if>
      <if test="isLocked != null" >
        is_locked = #{isLocked,jdbcType=INTEGER},
      </if>
      <if test="isRnregistration != null" >
        is_rnRegistration = #{isRnregistration,jdbcType=INTEGER},
      </if>
      <if test="isBingding != null" >
        is_bingding = #{isBingding,jdbcType=INTEGER},
      </if>
      <if test="registerTime != null" >
        register_time = #{registerTime,jdbcType=TIMESTAMP},
      </if>
      <if test="bindtime != null" >
        bindTime = #{bindtime,jdbcType=TIMESTAMP},
      </if>
      <if test="point != null" >
        point = #{point,jdbcType=DECIMAL},
      </if>
      <if test="parentId != null" >
      	parentId = #{parentId,jdbcType=VARCHAR}
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.nineShadow.model.PlayerBase" >
    update player_base
    set realname = #{realname,jdbcType=VARCHAR},
    IDcard = #{idcard,jdbcType=VARCHAR},
    nickname = #{nickname,jdbcType=VARCHAR},
    phone = #{phone,jdbcType=VARCHAR},
    postcode = #{postcode,jdbcType=VARCHAR},
    telname = #{telname,jdbcType=VARCHAR},
    telphone = #{telphone,jdbcType=VARCHAR},
    password = #{password,jdbcType=VARCHAR},
    sex = #{sex,jdbcType=INTEGER},
    headurl = #{headurl,jdbcType=VARCHAR},
    address = #{address,jdbcType=VARCHAR},
    openid = #{openid,jdbcType=VARCHAR},
    unionid = #{unionid,jdbcType=VARCHAR},
    is_locked = #{isLocked,jdbcType=INTEGER},
    is_rnRegistration = #{isRnregistration,jdbcType=INTEGER},
    is_bingding = #{isBingding,jdbcType=INTEGER},
    register_time = #{registerTime,jdbcType=TIMESTAMP},
    bindTime = #{bindtime,jdbcType=TIMESTAMP},
    point = #{point,jdbcType=DECIMAL},
    parentId = #{parentId,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="selectAll" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
    from player_base
  </select>
  <select id="selectByParam" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
    from player_base where nickname like CONCAT('%',#{param},'%') or phone like CONCAT('%',#{param},'%') or address like CONCAT('%',#{param},'%') 
  </select>
  <select id="selectByOpenid" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
    from player_base where openid =#{openid}
  </select>
  <select id="selectExceptProxy" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
    from player_base where id not in (select id from proxy)
  </select>
  <select id="selectExceptByParam" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
    from player_base where id not in (select id from proxy) 
    and nickname like CONCAT('%',#{param},'%') 
    or phone like CONCAT('%',#{param},'%') 
    or address like CONCAT('%',#{param},'%') 
    or id like CONCAT('%',#{param},'%') 
  </select>
  
  <select id="selectByExtendId" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
    from player_base where parentExtendId = #{extendId}
  </select>
  <select id="selectByExtendIdParam" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
    from player_base where parentExtendId = #{extendId} and (nickname like CONCAT('%',#{param},'%') or id like CONCAT('%',#{param},'%'))
  </select>
  <update id="updateMoneyById" parameterType="com.nineShadow.model.PlayerBase" >
    update player_base
    set point=#{point}
    where id = #{id}
  </update>
	<select id="selectByPhone" resultMap="BaseResultMap">
  	select 
    <include refid="Base_Column_List" />
    from player_base where phone = #{phone} limit 1
	</select>
	<select id="countByParentId" resultType="java.lang.Integer">
		select count(*) from player_base where parentId =#{parentId}
	</select>
	<select id="selectByParentId" resultMap="BaseResultMap">
	  	select 
	    <include refid="Base_Column_List" />
	    from player_base where parentId =#{parentId}
	</select>
	<select id="getRobotsByIds" resultMap="BaseResultMap">
		select * from player_base where id&lt;#{maxid} and id&gt;#{minid}
	</select>
</mapper>